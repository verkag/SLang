# 1 "src/frontend/parsing/lexer.mll"
 
  open Lexing
  open Parser
  

  exception SyntaxError of string

  let next_line lexbuff = 
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { 
        pos with pos_bol = lexbuf.lex_curr_pos;
                pos_lnum = pos.pos_lnum + 1
      }  

# 18 "src/frontend/parsing/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\215\255\216\255\217\255\001\000\218\255\061\000\220\255\
    \003\000\000\000\000\000\001\000\002\000\000\000\011\000\006\000\
    \087\000\000\000\238\255\028\000\001\000\241\255\242\255\243\255\
    \244\255\245\255\137\000\247\255\002\000\249\255\250\255\251\255\
    \252\255\253\255\254\255\255\255\237\255\240\255\239\255\002\000\
    \010\000\000\000\011\000\001\000\236\255\223\255\045\000\044\000\
    \000\000\054\000\235\255\057\000\233\255\042\000\094\000\226\255\
    \091\000\083\000\234\255\098\000\228\255\224\255\083\000\016\000\
    \230\255\089\000\094\000\231\255\106\000\091\000\022\000\229\255\
    \089\000\106\000\227\255\103\000\101\000\109\000\225\255\106\000\
    \102\000\097\000\112\000\222\255\002\000\245\255\181\000\169\000\
    \255\255\248\255\249\255\250\255\251\255\252\255\253\255\254\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\038\000\255\255\036\000\255\255\
    \034\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\255\255\040\000\040\000\255\255\255\255\255\255\
    \255\255\255\255\009\000\255\255\007\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\008\000\009\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\086\000\000\000\086\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\008\000\003\000\003\000\008\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \008\000\018\000\005\000\008\000\088\000\023\000\020\000\037\000\
    \035\000\034\000\025\000\027\000\031\000\026\000\030\000\024\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\064\000\029\000\022\000\028\000\021\000\036\000\
    \071\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\000\000\000\000\000\000\087\000\000\000\
    \000\000\039\000\013\000\012\000\044\000\049\000\016\000\057\000\
    \075\000\014\000\068\000\040\000\042\000\017\000\041\000\065\000\
    \009\000\061\000\079\000\072\000\011\000\056\000\015\000\010\000\
    \045\000\062\000\043\000\033\000\019\000\032\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \038\000\053\000\051\000\050\000\052\000\054\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \046\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\055\000\059\000\058\000\060\000\063\000\
    \066\000\048\000\067\000\069\000\047\000\070\000\073\000\074\000\
    \076\000\077\000\078\000\080\000\081\000\082\000\083\000\255\255\
    \095\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\085\000\000\000\000\000\094\000\000\000\000\000\
    \000\000\000\000\000\000\093\000\000\000\000\000\000\000\092\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\091\000\
    \000\000\000\000\000\000\090\000\000\000\089\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\004\000\008\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\008\000\084\000\000\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\063\000\000\000\000\000\000\000\000\000\028\000\
    \070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\084\000\255\255\
    \255\255\017\000\000\000\000\000\043\000\048\000\000\000\015\000\
    \010\000\000\000\012\000\039\000\041\000\000\000\039\000\013\000\
    \000\000\014\000\009\000\011\000\000\000\015\000\000\000\000\000\
    \040\000\014\000\042\000\000\000\000\000\000\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \019\000\046\000\047\000\049\000\051\000\053\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \016\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\054\000\056\000\057\000\059\000\062\000\
    \065\000\016\000\066\000\068\000\016\000\069\000\072\000\073\000\
    \075\000\076\000\077\000\079\000\080\000\081\000\082\000\086\000\
    \087\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\084\000\255\255\255\255\087\000\255\255\255\255\
    \255\255\255\255\255\255\087\000\255\255\255\255\255\255\087\000\
    \255\255\086\000\255\255\255\255\255\255\255\255\255\255\087\000\
    \255\255\255\255\255\255\087\000\255\255\087\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\086\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read_token lexbuf =
   __ocaml_lex_read_token_rec lexbuf 0
and __ocaml_lex_read_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 29 "src/frontend/parsing/lexer.mll"
        ( LPAREN )
# 195 "src/frontend/parsing/lexer.ml"

  | 1 ->
# 30 "src/frontend/parsing/lexer.mll"
        ( RPAREN )
# 200 "src/frontend/parsing/lexer.ml"

  | 2 ->
# 31 "src/frontend/parsing/lexer.mll"
        ( LBRACE )
# 205 "src/frontend/parsing/lexer.ml"

  | 3 ->
# 32 "src/frontend/parsing/lexer.mll"
        ( RBRACE )
# 210 "src/frontend/parsing/lexer.ml"

  | 4 ->
# 33 "src/frontend/parsing/lexer.mll"
        ( COMMA )
# 215 "src/frontend/parsing/lexer.ml"

  | 5 ->
# 34 "src/frontend/parsing/lexer.mll"
        ( DOT )
# 220 "src/frontend/parsing/lexer.ml"

  | 6 ->
# 35 "src/frontend/parsing/lexer.mll"
        ( SEMICOLON )
# 225 "src/frontend/parsing/lexer.ml"

  | 7 ->
# 36 "src/frontend/parsing/lexer.mll"
        ( EQUAL )
# 230 "src/frontend/parsing/lexer.ml"

  | 8 ->
# 37 "src/frontend/parsing/lexer.mll"
        ( PLUS )
# 235 "src/frontend/parsing/lexer.ml"

  | 9 ->
# 38 "src/frontend/parsing/lexer.mll"
        ( MINUS )
# 240 "src/frontend/parsing/lexer.ml"

  | 10 ->
# 39 "src/frontend/parsing/lexer.mll"
        ( MULT )
# 245 "src/frontend/parsing/lexer.ml"

  | 11 ->
# 40 "src/frontend/parsing/lexer.mll"
        ( DIV )
# 250 "src/frontend/parsing/lexer.ml"

  | 12 ->
# 41 "src/frontend/parsing/lexer.mll"
        ( REM )
# 255 "src/frontend/parsing/lexer.ml"

  | 13 ->
# 42 "src/frontend/parsing/lexer.mll"
        ( LANGLE )
# 260 "src/frontend/parsing/lexer.ml"

  | 14 ->
# 43 "src/frontend/parsing/lexer.mll"
        ( RANGLE )
# 265 "src/frontend/parsing/lexer.ml"

  | 15 ->
# 44 "src/frontend/parsing/lexer.mll"
         ( AND )
# 270 "src/frontend/parsing/lexer.ml"

  | 16 ->
# 45 "src/frontend/parsing/lexer.mll"
         ( OR )
# 275 "src/frontend/parsing/lexer.ml"

  | 17 ->
# 46 "src/frontend/parsing/lexer.mll"
        ( EXCLAMATION_MARK )
# 280 "src/frontend/parsing/lexer.ml"

  | 18 ->
# 47 "src/frontend/parsing/lexer.mll"
         ( DOUBLEEQUAL )
# 285 "src/frontend/parsing/lexer.ml"

  | 19 ->
# 48 "src/frontend/parsing/lexer.mll"
             ( MALLOC )
# 290 "src/frontend/parsing/lexer.ml"

  | 20 ->
# 49 "src/frontend/parsing/lexer.mll"
           ( FREE )
# 295 "src/frontend/parsing/lexer.ml"

  | 21 ->
# 50 "src/frontend/parsing/lexer.mll"
          ( VAR )
# 300 "src/frontend/parsing/lexer.ml"

  | 22 ->
# 51 "src/frontend/parsing/lexer.mll"
           ( FUNCTION )
# 305 "src/frontend/parsing/lexer.ml"

  | 23 ->
# 52 "src/frontend/parsing/lexer.mll"
          ( TYPE_INT )
# 310 "src/frontend/parsing/lexer.ml"

  | 24 ->
# 53 "src/frontend/parsing/lexer.mll"
           ( TYPE_BOOL )
# 315 "src/frontend/parsing/lexer.ml"

  | 25 ->
# 54 "src/frontend/parsing/lexer.mll"
           ( TYPE_INTPOINTER )
# 320 "src/frontend/parsing/lexer.ml"

  | 26 ->
# 55 "src/frontend/parsing/lexer.mll"
            ( TYPE_CHARPOINTER )
# 325 "src/frontend/parsing/lexer.ml"

  | 27 ->
# 56 "src/frontend/parsing/lexer.mll"
           ( TYPE_VOID )
# 330 "src/frontend/parsing/lexer.ml"

  | 28 ->
# 57 "src/frontend/parsing/lexer.mll"
           ( TRUE )
# 335 "src/frontend/parsing/lexer.ml"

  | 29 ->
# 58 "src/frontend/parsing/lexer.mll"
            ( FALSE )
# 340 "src/frontend/parsing/lexer.ml"

  | 30 ->
# 59 "src/frontend/parsing/lexer.mll"
            ( WHILE )
# 345 "src/frontend/parsing/lexer.ml"

  | 31 ->
# 60 "src/frontend/parsing/lexer.mll"
         ( IF )
# 350 "src/frontend/parsing/lexer.ml"

  | 32 ->
# 61 "src/frontend/parsing/lexer.mll"
           ( MAIN )
# 355 "src/frontend/parsing/lexer.ml"

  | 33 ->
# 62 "src/frontend/parsing/lexer.mll"
             (PRINTF )
# 360 "src/frontend/parsing/lexer.ml"

  | 34 ->
# 63 "src/frontend/parsing/lexer.mll"
               ( read_token lexbuf )
# 365 "src/frontend/parsing/lexer.ml"

  | 35 ->
# 64 "src/frontend/parsing/lexer.mll"
        ( INT (int_of_string (Lexing.lexeme lexbuf)))
# 370 "src/frontend/parsing/lexer.ml"

  | 36 ->
# 65 "src/frontend/parsing/lexer.mll"
       ( ID (Lexing.lexeme lexbuf) )
# 375 "src/frontend/parsing/lexer.ml"

  | 37 ->
# 66 "src/frontend/parsing/lexer.mll"
        ( read_string (Buffer.create 17) lexbuf )
# 380 "src/frontend/parsing/lexer.ml"

  | 38 ->
# 67 "src/frontend/parsing/lexer.mll"
            ( next_line lexbuf; read_token lexbuf )
# 385 "src/frontend/parsing/lexer.ml"

  | 39 ->
# 68 "src/frontend/parsing/lexer.mll"
        ( EOF )
# 390 "src/frontend/parsing/lexer.ml"

  | 40 ->
# 69 "src/frontend/parsing/lexer.mll"
      (raise (SyntaxError ("Lexer - Illegal character: " ^ Lexing.lexeme lexbuf)) )
# 395 "src/frontend/parsing/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_token_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
   __ocaml_lex_read_string_rec buf lexbuf 84
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 72 "src/frontend/parsing/lexer.mll"
              ( STRING (Buffer.contents buf) )
# 407 "src/frontend/parsing/lexer.ml"

  | 1 ->
# 73 "src/frontend/parsing/lexer.mll"
              ( Buffer.add_char buf '/'; read_string buf lexbuf )
# 412 "src/frontend/parsing/lexer.ml"

  | 2 ->
# 74 "src/frontend/parsing/lexer.mll"
              ( Buffer.add_char buf '\\'; read_string buf lexbuf )
# 417 "src/frontend/parsing/lexer.ml"

  | 3 ->
# 75 "src/frontend/parsing/lexer.mll"
              ( Buffer.add_char buf '\b'; read_string buf lexbuf )
# 422 "src/frontend/parsing/lexer.ml"

  | 4 ->
# 76 "src/frontend/parsing/lexer.mll"
              ( Buffer.add_char buf '\012'; read_string buf lexbuf )
# 427 "src/frontend/parsing/lexer.ml"

  | 5 ->
# 77 "src/frontend/parsing/lexer.mll"
              ( Buffer.add_char buf '\n'; read_string buf lexbuf )
# 432 "src/frontend/parsing/lexer.ml"

  | 6 ->
# 78 "src/frontend/parsing/lexer.mll"
              ( Buffer.add_char buf '\r'; read_string buf lexbuf )
# 437 "src/frontend/parsing/lexer.ml"

  | 7 ->
# 79 "src/frontend/parsing/lexer.mll"
              ( Buffer.add_char buf '\t'; read_string buf lexbuf )
# 442 "src/frontend/parsing/lexer.ml"

  | 8 ->
# 81 "src/frontend/parsing/lexer.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      read_string buf lexbuf
    )
# 449 "src/frontend/parsing/lexer.ml"

  | 9 ->
# 84 "src/frontend/parsing/lexer.mll"
      ( raise (SyntaxError ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 454 "src/frontend/parsing/lexer.ml"

  | 10 ->
# 85 "src/frontend/parsing/lexer.mll"
        ( raise (SyntaxError ("String is not terminated")) )
# 459 "src/frontend/parsing/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

;;

